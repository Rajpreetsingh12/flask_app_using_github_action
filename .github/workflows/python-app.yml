name: CI/CD Workflow

on:
  push:
    branches:
      - staging
    tags:
      - 'v*.*.*'

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          export PYTHONPATH=src
          pytest
  build:
    runs-on: ubuntu-latest
    needs: run_tests
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build application
        run: |
          # Add your build commands here
          echo "Building application..."
  deploy_staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging
        run: |
          # Add your staging deployment commands here
          echo "Deploying to staging..."
  deploy_production:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Flask-Deployment Directory
        run: |
          mkdir -p Flask-Deployment
          echo "Flask-Deployment directory ensured."
      - name: Print GitHub Ref
        run: |
          echo "GitHub Ref: $GITHUB_REF"
      - name: Deploy to Production
        env:
          PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          HOST_NAME: ${{ secrets.HOST_NAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Deploying to production..."
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} << 'EOF'
          
          # Create Flask-Deployment directory if it doesn't exist
          mkdir -p Flask-Deployment
          cd Flask-Deployment
          

          # Create Flask-Deployment directory if it doesn't exist
          mkdir -p Flask-Deployment
          cd Flask-Deployment

          # Check if the directory is a Git repository
          if [ ! -d .git ]; then
            echo 'Directory Flask-Deployment is not a Git repository. Cloning repository...'
            git clone https://github.com/${GITHUB_REPOSITORY}.git . 
          else
            echo 'Directory Flask-Deployment is a Git repository. Pulling latest changes...'
            git pull
          fi

          
          # # Install necessary packages
          # sudo apt update
          # sudo apt install -y python3 python3-pip
          
          # # Set up Python environment and install dependencies
          # python3 -m venv myenv
          # source myenv/bin/activate
          # pip install -r requirements.txt
          # pip install gunicorn
          
          # # Check and enable UFW if it's not active
          # sudo ufw status | grep -q "Status: active" || sudo ufw enable
          # # Add necessary firewall rules
          # sudo ufw allow 22/tcp
          # sudo ufw allow 80/tcp
          # sudo ufw allow 5000/tcp
          
          # # Reload UFW to apply changes
          # sudo ufw reload || true
         
          # # Stop any existing Gunicorn processes or processes using port 5000
          # sudo fuser -k 5000/tcp || true
          # sudo pkill -f 'gunicorn.*src.app:app' || true
          
          # # Start Gunicorn manually for debugging
          # source myenv/bin/activate
          # gunicorn --bind 0.0.0.0:5000 --workers 2 --worker-class gevent src.app:app &
          # sleep 10 # Give it some time to start
          # # Verify Gunicorn is running
          # if ! pgrep -f 'gunicorn.*src.app:app'; then
          #   echo "Gunicorn failed to start. Check for errors."
          #   exit 1
          # fi

          # # Create systemd service file
          # sudo tee /etc/systemd/system/flaskapp.service > /dev/null <<EOL
          # [Unit]
          # Description=Flask Application
          # After=network.target
          # [Service]
          # User=ubuntu
          # Group=ubuntu
          # WorkingDirectory=/home/ubuntu/Flask-Deployment
          # ExecStart=/home/ubuntu/Flask-Deployment/myenv/bin/gunicorn --workers 2 --bind unix:/home/ubuntu/Flask-Deployment/flaskapp.sock src.app:app
          # Restart=always
          # [Install]
          # WantedBy=multi-user.target
          # EOL

          # # Reload systemd and start the service
          # sudo systemctl daemon-reload
          # sudo systemctl restart flaskapp || true
          # sudo systemctl enable flaskapp
          EOF

          # Install necessary packages
          sudo apt update
          sudo apt install -y python3 python3-pip
          # Set up Python environment and install dependencies
          python3 -m venv myenv
          source myenv/bin/activate
          pip install -r requirements.txt
          pip install gunicorn
          # Check and enable UFW if it's not active
          sudo ufw status | grep -q "Status: active" || sudo ufw enable
          # Add necessary firewall rules
          sudo ufw allow 22/tcp
          sudo ufw allow 80/tcp
          sudo ufw allow 5000/tcp
          # Reload UFW to apply changes
          sudo ufw reload || true
          # Stop any existing Gunicorn processes or processes using port 5000
          sudo fuser -k 5000/tcp || true
          sudo pkill -f 'gunicorn.*src.app:app' || true
          # Start Gunicorn manually for debugging
          source myenv/bin/activate
          gunicorn --bind 0.0.0.0:5000 --workers 2 --worker-class gevent src.app:app &
          sleep 10 # Give it some time to start
          # Verify Gunicorn is running
          if ! pgrep -f 'gunicorn.*src.app:app'; then
            echo "Gunicorn failed to start. Check for errors."
            exit 1
          fi
          # Create systemd service file
          sudo tee /etc/systemd/system/flaskapp.service > /dev/null <<EOL
          [Unit]
          Description=Flask Application
          After=network.target
          [Service]
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/home/ubuntu/Flask-Deployment
          ExecStart=/home/ubuntu/Flask-Deployment/myenv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/Flask-Deployment/flaskapp.sock src.app:app
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOL
          # Reload systemd and start the service
          sudo systemctl daemon-reload
          sudo systemctl restart flaskapp || true
          sudo systemctl enable flaskapp
          EOF
